/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

#import "GolgiHomeAutomationSvcGen.h"

@implementation DeviceDesc

@synthesize deviceIdIsSet;
- (NSInteger)getDeviceId
{
    return deviceId;
}
- (void)setDeviceId:(NSInteger )_deviceId
{
    deviceId = _deviceId;
    deviceIdIsSet = YES;
}
@synthesize deviceNameIsSet;
- (NSString *)getDeviceName
{
    return deviceName;
}
- (void)setDeviceName:(NSString *)_deviceName
{
    deviceName = _deviceName;
    deviceNameIsSet = (_deviceName != nil) ? YES : NO;
}
@synthesize switchStateIsSet;
- (NSInteger)getSwitchState
{
    return switchState;
}
- (void)setSwitchState:(NSInteger )_switchState
{
    switchState = _switchState;
    switchStateIsSet = YES;
}

+ (DeviceDesc *)deserialiseFromString: (NSString *)string
{
    return [DeviceDesc deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (DeviceDesc *)deserialiseFromPayload: (GolgiPayload *)payload
{
    DeviceDesc *inst = [[DeviceDesc alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.deviceId = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"2:"]) != nil){
            inst.deviceName = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"3:"]) != nil){
            inst.switchState = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(deviceIdIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)deviceId];
    }
    if(deviceNameIsSet){
        [_str appendFormat:@"%@2: \"%@\"\n", prefix, [CSL  NTLEscapeString:deviceName]];
    }
    if(switchStateIsSet){
        [_str appendFormat:@"%@3: %ld\n", prefix, (long)switchState];
    }

    return [NSString stringWithString:_str];
}

- (DeviceDesc *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        deviceIdIsSet = defIsSet;
        deviceName = @"";
        deviceNameIsSet = defIsSet;
        switchStateIsSet = defIsSet;
    }

    return self;

}

@end
@implementation RoomTemp

@synthesize tempIsSet;
- (NSInteger)getTemp
{
    return temp;
}
- (void)setTemp:(NSInteger )_temp
{
    temp = _temp;
    tempIsSet = YES;
}

+ (RoomTemp *)deserialiseFromString: (NSString *)string
{
    return [RoomTemp deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (RoomTemp *)deserialiseFromPayload: (GolgiPayload *)payload
{
    RoomTemp *inst = [[RoomTemp alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.temp = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(tempIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)temp];
    }

    return [NSString stringWithString:_str];
}

- (RoomTemp *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        tempIsSet = defIsSet;
    }

    return self;

}

@end
@implementation golgiHomeAutomation_updateLightDevice_reqArg
@synthesize deviceDescIsSet;
- (DeviceDesc *)getDeviceDesc
{
    return deviceDesc;
}
- (void)setDeviceDesc:(DeviceDesc *)_deviceDesc
{
    deviceDesc = _deviceDesc;
    deviceDescIsSet = (_deviceDesc != nil) ? YES : NO;
}
+ (golgiHomeAutomation_updateLightDevice_reqArg *)deserialiseFromString: (NSString *)string
{
    return [golgiHomeAutomation_updateLightDevice_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}
+ (golgiHomeAutomation_updateLightDevice_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    golgiHomeAutomation_updateLightDevice_reqArg *inst = [[golgiHomeAutomation_updateLightDevice_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setDeviceDesc:[DeviceDesc deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setDeviceDesc:nil];
        }
    }
    if([inst getDeviceDesc] == nil){
        corrupt = YES;
    }
    return (corrupt) ? nil : inst;
}
- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}
- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    if(deviceDescIsSet){
        [_str appendString:[deviceDesc serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }
    return [NSString stringWithString:_str];
}
- (golgiHomeAutomation_updateLightDevice_reqArg *)init
{
    return [self initWithIsSet:YES];
}
- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        deviceDesc = [[DeviceDesc alloc] initWithIsSet:defIsSet];
        deviceDescIsSet = defIsSet;
    }
    return self;
}
@end
@implementation golgiHomeAutomation_updateLightDevice_rspArg
@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}
- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}
@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}
- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}
+ (golgiHomeAutomation_updateLightDevice_rspArg *)deserialiseFromString: (NSString *)string
{
    return [golgiHomeAutomation_updateLightDevice_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}
+ (golgiHomeAutomation_updateLightDevice_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    golgiHomeAutomation_updateLightDevice_rspArg *inst = [[golgiHomeAutomation_updateLightDevice_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;
    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }
    return (corrupt) ? nil : inst;
}
- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}
- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }
    return [NSString stringWithString:_str];
}
- (golgiHomeAutomation_updateLightDevice_rspArg *)init
{
    return [self initWithIsSet:YES];
}
- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }
    return self;
}
@end
@implementation golgiHomeAutomation_updateBoilerDevice_reqArg
@synthesize deviceDescIsSet;
- (DeviceDesc *)getDeviceDesc
{
    return deviceDesc;
}
- (void)setDeviceDesc:(DeviceDesc *)_deviceDesc
{
    deviceDesc = _deviceDesc;
    deviceDescIsSet = (_deviceDesc != nil) ? YES : NO;
}
@synthesize tempIsSet;
- (NSInteger)getTemp
{
    return temp;
}
- (void)setTemp:(NSInteger )_temp
{
    temp = _temp;
    tempIsSet = YES;
}
+ (golgiHomeAutomation_updateBoilerDevice_reqArg *)deserialiseFromString: (NSString *)string
{
    return [golgiHomeAutomation_updateBoilerDevice_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}
+ (golgiHomeAutomation_updateBoilerDevice_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    golgiHomeAutomation_updateBoilerDevice_reqArg *inst = [[golgiHomeAutomation_updateBoilerDevice_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setDeviceDesc:[DeviceDesc deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setDeviceDesc:nil];
        }
    }
    if([inst getDeviceDesc] == nil){
        corrupt = YES;
    }
    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"2:"]) != nil){
            inst.temp = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }
    return (corrupt) ? nil : inst;
}
- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}
- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    if(deviceDescIsSet){
        [_str appendString:[deviceDesc serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }
    if(tempIsSet){
        [_str appendFormat:@"%@2: %ld\n", prefix, (long)temp];
    }
    return [NSString stringWithString:_str];
}
- (golgiHomeAutomation_updateBoilerDevice_reqArg *)init
{
    return [self initWithIsSet:YES];
}
- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        deviceDesc = [[DeviceDesc alloc] initWithIsSet:defIsSet];
        deviceDescIsSet = defIsSet;
        tempIsSet = defIsSet;
    }
    return self;
}
@end
@implementation golgiHomeAutomation_updateBoilerDevice_rspArg
@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}
- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}
@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}
- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}
+ (golgiHomeAutomation_updateBoilerDevice_rspArg *)deserialiseFromString: (NSString *)string
{
    return [golgiHomeAutomation_updateBoilerDevice_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}
+ (golgiHomeAutomation_updateBoilerDevice_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    golgiHomeAutomation_updateBoilerDevice_rspArg *inst = [[golgiHomeAutomation_updateBoilerDevice_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;
    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }
    return (corrupt) ? nil : inst;
}
- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}
- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }
    return [NSString stringWithString:_str];
}
- (golgiHomeAutomation_updateBoilerDevice_rspArg *)init
{
    return [self initWithIsSet:YES];
}
- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }
    return self;
}
@end
@implementation golgiHomeAutomation_getRoomTemp_rspArg
@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}
- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}
@synthesize resultIsSet;
- (RoomTemp *)getResult
{
    return result;
}
- (void)setResult:(RoomTemp *)_result
{
    result = _result;
    resultIsSet = (_result != nil) ? YES : NO;
}
@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}
- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}
+ (golgiHomeAutomation_getRoomTemp_rspArg *)deserialiseFromString: (NSString *)string
{
    return [golgiHomeAutomation_getRoomTemp_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}
+ (golgiHomeAutomation_getRoomTemp_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    golgiHomeAutomation_getRoomTemp_rspArg *inst = [[golgiHomeAutomation_getRoomTemp_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;
    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"2"]) != nil){
            [inst setResult:[RoomTemp deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setResult:nil];
        }
    }
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }
    return (corrupt) ? nil : inst;
}
- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}
- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(resultIsSet){
        [_str appendString:[result serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "2"]]];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }
    return [NSString stringWithString:_str];
}
- (golgiHomeAutomation_getRoomTemp_rspArg *)init
{
    return [self initWithIsSet:YES];
}
- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        result = [[RoomTemp alloc] initWithIsSet:defIsSet];
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }
    return self;
}
@end
@implementation golgiHomeAutomationUpdateLightDeviceExceptionBundle
@synthesize golgiException;
- (golgiHomeAutomationUpdateLightDeviceExceptionBundle *) init
{
    self = [super init];
    golgiException = nil;
    return self;
}
@end

@interface UpdateLightDeviceInternalResultSender : NSObject <golgiHomeAutomationUpdateLightDeviceResultSender>
{
    NSString *sender;
    NSString *msgId;
    golgiHomeAutomation_updateLightDevice_rspArg *rsp;
}
- (UpdateLightDeviceInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation UpdateLightDeviceInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (UpdateLightDeviceInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[golgiHomeAutomation_updateLightDevice_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"updateLightDevice.golgiHomeAutomation" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface UpdateLightDeviceInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<golgiHomeAutomationUpdateLightDeviceRequestReceiver> receiver;
    void (^userHandler)(id<golgiHomeAutomationUpdateLightDeviceResultSender> resultSender, DeviceDesc * deviceDesc);
}

- (UpdateLightDeviceInternalRequestHandler *)initWithReceiver:(id<golgiHomeAutomationUpdateLightDeviceRequestReceiver>)receiver;
- (UpdateLightDeviceInternalRequestHandler *)initWithHandler:(void (^)(id<golgiHomeAutomationUpdateLightDeviceResultSender> resultSender, DeviceDesc * deviceDesc))userHandler;
@end

@implementation UpdateLightDeviceInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    golgiHomeAutomation_updateLightDevice_reqArg *req = [golgiHomeAutomation_updateLightDevice_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"updateLightDevice.golgiHomeAutomation" withMessageId:msgId];
    }
    else{
        // Process req here
        UpdateLightDeviceInternalResultSender *resultSender;
        resultSender = [UpdateLightDeviceInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver updateLightDeviceWithResultSender:resultSender andDeviceDesc:[req getDeviceDesc]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getDeviceDesc]);    }
    }
}

- (UpdateLightDeviceInternalRequestHandler *)initWithReceiver:(id<golgiHomeAutomationUpdateLightDeviceRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (UpdateLightDeviceInternalRequestHandler *)initWithHandler:(void (^)(id<golgiHomeAutomationUpdateLightDeviceResultSender> resultSender, DeviceDesc * deviceDesc))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface UpdateLightDeviceInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<golgiHomeAutomationUpdateLightDeviceResultReceiver> receiver;
    void (^handler)(golgiHomeAutomationUpdateLightDeviceExceptionBundle *exceptionBundle);
}

- (UpdateLightDeviceInternalResponseHandler *)initWithReceiver:(id<golgiHomeAutomationUpdateLightDeviceResultReceiver>)receiver orHandler:(void (^)(golgiHomeAutomationUpdateLightDeviceExceptionBundle *exceptionBundle))handler;
@end
@implementation UpdateLightDeviceInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    golgiHomeAutomation_updateLightDevice_rspArg *rsp = [golgiHomeAutomation_updateLightDevice_rspArg deserialiseFromString:payload];
    golgiHomeAutomationUpdateLightDeviceExceptionBundle *exBundle = [[golgiHomeAutomationUpdateLightDeviceExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'updateLightDevice' in Golgi Service 'golgiHomeAutomation' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (UpdateLightDeviceInternalResponseHandler *)initWithReceiver:(id<golgiHomeAutomationUpdateLightDeviceResultReceiver>)_receiver orHandler:(void (^)(golgiHomeAutomationUpdateLightDeviceExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation golgiHomeAutomationUpdateBoilerDeviceExceptionBundle
@synthesize golgiException;
- (golgiHomeAutomationUpdateBoilerDeviceExceptionBundle *) init
{
    self = [super init];
    golgiException = nil;
    return self;
}
@end

@interface UpdateBoilerDeviceInternalResultSender : NSObject <golgiHomeAutomationUpdateBoilerDeviceResultSender>
{
    NSString *sender;
    NSString *msgId;
    golgiHomeAutomation_updateBoilerDevice_rspArg *rsp;
}
- (UpdateBoilerDeviceInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation UpdateBoilerDeviceInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (UpdateBoilerDeviceInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[golgiHomeAutomation_updateBoilerDevice_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"updateBoilerDevice.golgiHomeAutomation" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface UpdateBoilerDeviceInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<golgiHomeAutomationUpdateBoilerDeviceRequestReceiver> receiver;
    void (^userHandler)(id<golgiHomeAutomationUpdateBoilerDeviceResultSender> resultSender, DeviceDesc * deviceDesc, NSInteger temp);
}

- (UpdateBoilerDeviceInternalRequestHandler *)initWithReceiver:(id<golgiHomeAutomationUpdateBoilerDeviceRequestReceiver>)receiver;
- (UpdateBoilerDeviceInternalRequestHandler *)initWithHandler:(void (^)(id<golgiHomeAutomationUpdateBoilerDeviceResultSender> resultSender, DeviceDesc * deviceDesc, NSInteger temp))userHandler;
@end

@implementation UpdateBoilerDeviceInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    golgiHomeAutomation_updateBoilerDevice_reqArg *req = [golgiHomeAutomation_updateBoilerDevice_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"updateBoilerDevice.golgiHomeAutomation" withMessageId:msgId];
    }
    else{
        // Process req here
        UpdateBoilerDeviceInternalResultSender *resultSender;
        resultSender = [UpdateBoilerDeviceInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver updateBoilerDeviceWithResultSender:resultSender andDeviceDesc:[req getDeviceDesc] andTemp:[req getTemp]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getDeviceDesc], [req getTemp]);    }
    }
}

- (UpdateBoilerDeviceInternalRequestHandler *)initWithReceiver:(id<golgiHomeAutomationUpdateBoilerDeviceRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (UpdateBoilerDeviceInternalRequestHandler *)initWithHandler:(void (^)(id<golgiHomeAutomationUpdateBoilerDeviceResultSender> resultSender, DeviceDesc * deviceDesc, NSInteger temp))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface UpdateBoilerDeviceInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<golgiHomeAutomationUpdateBoilerDeviceResultReceiver> receiver;
    void (^handler)(golgiHomeAutomationUpdateBoilerDeviceExceptionBundle *exceptionBundle);
}

- (UpdateBoilerDeviceInternalResponseHandler *)initWithReceiver:(id<golgiHomeAutomationUpdateBoilerDeviceResultReceiver>)receiver orHandler:(void (^)(golgiHomeAutomationUpdateBoilerDeviceExceptionBundle *exceptionBundle))handler;
@end
@implementation UpdateBoilerDeviceInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    golgiHomeAutomation_updateBoilerDevice_rspArg *rsp = [golgiHomeAutomation_updateBoilerDevice_rspArg deserialiseFromString:payload];
    golgiHomeAutomationUpdateBoilerDeviceExceptionBundle *exBundle = [[golgiHomeAutomationUpdateBoilerDeviceExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'updateBoilerDevice' in Golgi Service 'golgiHomeAutomation' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (UpdateBoilerDeviceInternalResponseHandler *)initWithReceiver:(id<golgiHomeAutomationUpdateBoilerDeviceResultReceiver>)_receiver orHandler:(void (^)(golgiHomeAutomationUpdateBoilerDeviceExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation golgiHomeAutomationGetRoomTempExceptionBundle
@synthesize golgiException;
- (golgiHomeAutomationGetRoomTempExceptionBundle *) init
{
    self = [super init];
    golgiException = nil;
    return self;
}
@end

@interface GetRoomTempInternalResultSender : NSObject <golgiHomeAutomationGetRoomTempResultSender>
{
    NSString *sender;
    NSString *msgId;
    golgiHomeAutomation_getRoomTemp_rspArg *rsp;
}
- (GetRoomTempInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation GetRoomTempInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (GetRoomTempInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[golgiHomeAutomation_getRoomTemp_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"getRoomTemp.golgiHomeAutomation" withMessageId:msgId];
}

- (void)successWithResult:(RoomTemp *)result
{
    [rsp setInternalSuccess_:1];
    [rsp setResult: result];
    [self sendResponse];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

@end

@interface GetRoomTempInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<golgiHomeAutomationGetRoomTempRequestReceiver> receiver;
    void (^userHandler)(id<golgiHomeAutomationGetRoomTempResultSender> resultSender);
}

- (GetRoomTempInternalRequestHandler *)initWithReceiver:(id<golgiHomeAutomationGetRoomTempRequestReceiver>)receiver;
- (GetRoomTempInternalRequestHandler *)initWithHandler:(void (^)(id<golgiHomeAutomationGetRoomTempResultSender> resultSender))userHandler;
@end

@implementation GetRoomTempInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    // Process req here
    GetRoomTempInternalResultSender *resultSender;
    resultSender = [GetRoomTempInternalResultSender alloc];
    resultSender = [resultSender initWithSender:sender andMessageId:msgId];
    if(receiver != nil){
        [receiver getRoomTempWithResultSender:resultSender];
    }
    else if(userHandler != nil){
        userHandler(resultSender);    }
}

- (GetRoomTempInternalRequestHandler *)initWithReceiver:(id<golgiHomeAutomationGetRoomTempRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (GetRoomTempInternalRequestHandler *)initWithHandler:(void (^)(id<golgiHomeAutomationGetRoomTempResultSender> resultSender))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface GetRoomTempInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<golgiHomeAutomationGetRoomTempResultReceiver> receiver;
    void (^handler)(RoomTemp *Result,golgiHomeAutomationGetRoomTempExceptionBundle *exceptionBundle);
}

- (GetRoomTempInternalResponseHandler *)initWithReceiver:(id<golgiHomeAutomationGetRoomTempResultReceiver>)receiver orHandler:(void (^)(RoomTemp *Result,golgiHomeAutomationGetRoomTempExceptionBundle *exceptionBundle))handler;
@end
@implementation GetRoomTempInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    golgiHomeAutomation_getRoomTemp_rspArg *rsp = [golgiHomeAutomation_getRoomTemp_rspArg deserialiseFromString:payload];
    golgiHomeAutomationGetRoomTempExceptionBundle *exBundle = [[golgiHomeAutomationGetRoomTempExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(nil, exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver successWithResult:[rsp getResult]];
        }
        else{ // Must have a handler
            handler([rsp getResult], nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(nil, exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'getRoomTemp' in Golgi Service 'golgiHomeAutomation' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (GetRoomTempInternalResponseHandler *)initWithReceiver:(id<golgiHomeAutomationGetRoomTempResultReceiver>)_receiver orHandler:(void (^)(RoomTemp *Result,golgiHomeAutomationGetRoomTempExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end



/********************************************************/
/********************************************************/
/********************************************************/


@implementation golgiHomeAutomationSvc
//
// updateLightDevice
//
+ (void)sendUpdateLightDeviceUsingResultHandler:(void (^)(golgiHomeAutomationUpdateLightDeviceExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc
{
    [self sendUpdateLightDeviceUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withDeviceDesc:deviceDesc];
}

+ (void)sendUpdateLightDeviceUsingResultHandler:(void (^)(golgiHomeAutomationUpdateLightDeviceExceptionBundle *))resultHandler andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc
{
    [self sendUpdateLightDeviceUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withDeviceDesc:deviceDesc];
}

+ (void)sendUpdateLightDeviceUsingResultReceiver:(id<golgiHomeAutomationUpdateLightDeviceResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc
{
    [self sendUpdateLightDeviceUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withDeviceDesc:deviceDesc];
}

+ (void)sendUpdateLightDeviceUsingResultReceiver:(id<golgiHomeAutomationUpdateLightDeviceResultReceiver>)resultReceiver andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc
{
    [self sendUpdateLightDeviceUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withDeviceDesc:deviceDesc];
}

//
// updateLightDevice with transport options and receiver/handler
//
+ (void)sendUpdateLightDeviceUsingResultReceiver:(id<golgiHomeAutomationUpdateLightDeviceResultReceiver>)resultReceiver orResultHandler:(void (^)(golgiHomeAutomationUpdateLightDeviceExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc
{
    NSString *_payload;
    golgiHomeAutomation_updateLightDevice_reqArg *_reqArg = [[golgiHomeAutomation_updateLightDevice_reqArg alloc] init];
    UpdateLightDeviceInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [UpdateLightDeviceInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setDeviceDesc:deviceDesc];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"updateLightDevice.golgiHomeAutomation" andResponseHandler:_iRspHndlr];

}

//
// updateLightDevice using closure
//
// + (void)sendUpdateLightDeviceUsingResultHandler:(void (^)(golgiHomeAutomationUpdateLightDeviceExceptionBundle *))resultHandler andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc

+ (void)registerUpdateLightDeviceRequestReceiver:(id<golgiHomeAutomationUpdateLightDeviceRequestReceiver>)requestReceiver
{
    UpdateLightDeviceInternalRequestHandler *reqHandler;
    reqHandler = [UpdateLightDeviceInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"updateLightDevice.golgiHomeAutomation"];
}

+ (void)registerUpdateLightDeviceRequestHandler:(void (^)(id<golgiHomeAutomationUpdateLightDeviceResultSender> resultSender, DeviceDesc * deviceDesc))requestHandler;
{
    UpdateLightDeviceInternalRequestHandler *reqHandler;
    reqHandler = [UpdateLightDeviceInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"updateLightDevice.golgiHomeAutomation"];
}

//
// updateBoilerDevice
//
+ (void)sendUpdateBoilerDeviceUsingResultHandler:(void (^)(golgiHomeAutomationUpdateBoilerDeviceExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc andTemp:(NSInteger)temp
{
    [self sendUpdateBoilerDeviceUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withDeviceDesc:deviceDesc andTemp:temp];
}

+ (void)sendUpdateBoilerDeviceUsingResultHandler:(void (^)(golgiHomeAutomationUpdateBoilerDeviceExceptionBundle *))resultHandler andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc andTemp:(NSInteger)temp
{
    [self sendUpdateBoilerDeviceUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withDeviceDesc:deviceDesc andTemp:temp];
}

+ (void)sendUpdateBoilerDeviceUsingResultReceiver:(id<golgiHomeAutomationUpdateBoilerDeviceResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc andTemp:(NSInteger)temp
{
    [self sendUpdateBoilerDeviceUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withDeviceDesc:deviceDesc andTemp:temp];
}

+ (void)sendUpdateBoilerDeviceUsingResultReceiver:(id<golgiHomeAutomationUpdateBoilerDeviceResultReceiver>)resultReceiver andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc andTemp:(NSInteger)temp
{
    [self sendUpdateBoilerDeviceUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withDeviceDesc:deviceDesc andTemp:temp];
}

//
// updateBoilerDevice with transport options and receiver/handler
//
+ (void)sendUpdateBoilerDeviceUsingResultReceiver:(id<golgiHomeAutomationUpdateBoilerDeviceResultReceiver>)resultReceiver orResultHandler:(void (^)(golgiHomeAutomationUpdateBoilerDeviceExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc andTemp:(NSInteger)temp
{
    NSString *_payload;
    golgiHomeAutomation_updateBoilerDevice_reqArg *_reqArg = [[golgiHomeAutomation_updateBoilerDevice_reqArg alloc] init];
    UpdateBoilerDeviceInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [UpdateBoilerDeviceInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setDeviceDesc:deviceDesc];
    [_reqArg setTemp:temp];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"updateBoilerDevice.golgiHomeAutomation" andResponseHandler:_iRspHndlr];

}

//
// updateBoilerDevice using closure
//
// + (void)sendUpdateBoilerDeviceUsingResultHandler:(void (^)(golgiHomeAutomationUpdateBoilerDeviceExceptionBundle *))resultHandler andDestination:(NSString *)_dst withDeviceDesc:(DeviceDesc *)deviceDesc andTemp:(NSInteger)temp

+ (void)registerUpdateBoilerDeviceRequestReceiver:(id<golgiHomeAutomationUpdateBoilerDeviceRequestReceiver>)requestReceiver
{
    UpdateBoilerDeviceInternalRequestHandler *reqHandler;
    reqHandler = [UpdateBoilerDeviceInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"updateBoilerDevice.golgiHomeAutomation"];
}

+ (void)registerUpdateBoilerDeviceRequestHandler:(void (^)(id<golgiHomeAutomationUpdateBoilerDeviceResultSender> resultSender, DeviceDesc * deviceDesc, NSInteger temp))requestHandler;
{
    UpdateBoilerDeviceInternalRequestHandler *reqHandler;
    reqHandler = [UpdateBoilerDeviceInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"updateBoilerDevice.golgiHomeAutomation"];
}

//
// getRoomTemp
//
+ (void)sendGetRoomTempUsingResultHandler:(void (^)(RoomTemp *, golgiHomeAutomationGetRoomTempExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst
{
    [self sendGetRoomTempUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        ];
}

+ (void)sendGetRoomTempUsingResultHandler:(void (^)(RoomTemp *, golgiHomeAutomationGetRoomTempExceptionBundle *))resultHandler andDestination:(NSString *)_dst
{
    [self sendGetRoomTempUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        ];
}

+ (void)sendGetRoomTempUsingResultReceiver:(id<golgiHomeAutomationGetRoomTempResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst
{
    [self sendGetRoomTempUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        ];
}

+ (void)sendGetRoomTempUsingResultReceiver:(id<golgiHomeAutomationGetRoomTempResultReceiver>)resultReceiver andDestination:(NSString *)_dst
{
    [self sendGetRoomTempUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        ];
}

//
// getRoomTemp with transport options and receiver/handler
//
+ (void)sendGetRoomTempUsingResultReceiver:(id<golgiHomeAutomationGetRoomTempResultReceiver>)resultReceiver orResultHandler:(void (^)(RoomTemp *, golgiHomeAutomationGetRoomTempExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst
{
    NSString *_payload;
    GetRoomTempInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [GetRoomTempInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    _payload = @"";

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"getRoomTemp.golgiHomeAutomation" andResponseHandler:_iRspHndlr];

}

//
// getRoomTemp using closure
//
// + (void)sendGetRoomTempUsingResultHandler:(void (^)(RoomTemp *, golgiHomeAutomationGetRoomTempExceptionBundle *))resultHandler andDestination:(NSString *)_dst

+ (void)registerGetRoomTempRequestReceiver:(id<golgiHomeAutomationGetRoomTempRequestReceiver>)requestReceiver
{
    GetRoomTempInternalRequestHandler *reqHandler;
    reqHandler = [GetRoomTempInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"getRoomTemp.golgiHomeAutomation"];
}

+ (void)registerGetRoomTempRequestHandler:(void (^)(id<golgiHomeAutomationGetRoomTempResultSender> resultSender))requestHandler;
{
    GetRoomTempInternalRequestHandler *reqHandler;
    reqHandler = [GetRoomTempInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"getRoomTemp.golgiHomeAutomation"];
}

@end
